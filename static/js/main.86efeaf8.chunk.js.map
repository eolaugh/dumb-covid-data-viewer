{"version":3,"sources":["Table/index.tsx","Main/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Table","props","columns","data","country","console","log","countryData","tableColumns","map","column","Header","columnHeader","accessor","columnKey","id","location","memoColumns","useMemo","useTable","initialState","pageSize","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","filter","header","headers","length","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","type","defaultValue","onChange","e","target","value","Number","style","width","Main","useState","covidData","setCovidData","countries","setCountries","activeCountry","setActiveCountry","handleChange","useEffect","fetch","then","response","json","Object","keys","dataArr","forEach","tla","push","name","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86efeaf8.chunk.js","sourcesContent":["import { useTable, Column, useSortBy, usePagination } from 'react-table'\r\nimport { useMemo } from 'react'\r\n\r\nexport const Table = (props: { columns: any, data: any, country: string}) => {\r\n\r\n    const { columns, data, country} = props\r\n\r\n    console.log(country)\r\n    console.log(data)\r\n\r\n    const countryData = data[country]\r\n\r\n\r\n    const tableColumns = columns.map((column: any) => {\r\n        return {\r\n          Header: column.columnHeader,\r\n          accessor: column.columnKey,\r\n          id: column.columnKey,\r\n        } as Column\r\n      })\r\n\r\n      const location = countryData.location\r\n\r\n    \r\n      const memoColumns = useMemo(\r\n        () => [{ Header: location, columns: tableColumns }],\r\n        [],\r\n      )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        prepareRow,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize },\r\n      } = useTable({\r\n        columns: memoColumns as any,\r\n        data: countryData.data,\r\n        initialState: { pageSize: 25 },\r\n      },\r\n      useSortBy,\r\n      usePagination\r\n    )\r\n\r\n    return (\r\n        <div>\r\n        <div>\r\n    <h1>{countryData.location}</h1>\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.filter((header) => header.headers.length > 1 ).map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps((column as any).getSortByToggleProps)}>{column.render('Header')} {(column as any).isSorted ? (\r\n                    (column as any).isSortedDesc ? (\r\n                        <span>desc</span>\r\n                    ) : (\r\n                        <span>asc</span>\r\n                    )\r\n                  ) : (\r\n                    ''\r\n                  )}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n        <div>\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n            {'<<'}\r\n          </button>{' '}\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n            {'<'}\r\n          </button>{' '}\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n            {'>'}\r\n          </button>{' '}\r\n          <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n            {'>>'}\r\n          </button>{' '}\r\n          <span>\r\n            Page{' '}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <span>\r\n            | Go to page:{' '}\r\n            <input\r\n              type=\"number\"\r\n              defaultValue={pageIndex + 1}\r\n              onChange={e => {\r\n                const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                gotoPage(page)\r\n              }}\r\n              style={{ width: '100px' }}\r\n            />\r\n          </span>{' '}\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value))\r\n            }}\r\n          >\r\n            {[10, 20, 30, 40, 50].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        </div>\r\n        \r\n      )\r\n}","import axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { DataList } from '../DataList'\r\nimport { Table } from '../Table'\r\n\r\n\r\n\r\nexport const Main = () => {\r\n    const [covidData, setCovidData] = useState()\r\n    const [countries, setCountries] = useState([])\r\n    const [activeCountry, setActiveCountry] = useState('USA')\r\n\r\n    const handleChange = (e: any) => {\r\n        setActiveCountry(e.target.value)\r\n        \r\n    }\r\n\r\n    useEffect(() => {   \r\n        fetch(\"https://covid.ourworldindata.org/data/owid-covid-data.json\")\r\n        .then(response =>\r\n             response.json()\r\n            )\r\n        .then(json => {\r\n            const countries = Object.keys(json)\r\n            const dataArr: any = []\r\n            countries.forEach(country => {\r\n                let countryEntry = json[country]\r\n                countryEntry.tla = country\r\n                if(country.length === 3){\r\n                dataArr.push(json[country])\r\n                }\r\n            })\r\n            console.log(dataArr)\r\n            setCountries(dataArr)\r\n            setActiveCountry(dataArr[0].tla)\r\n            console.log(dataArr)\r\n            setCovidData(json)\r\n            \r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n    const columns = [\r\n        {columnHeader: \"Date\", columnKey: \"date\"},\r\n{columnHeader: \"New Cases\", columnKey: \"new_cases\"},\r\n{columnHeader: \"New Cases (per Million)\", columnKey: \"new_cases_per_million\"},\r\n{columnHeader: \"New Deaths\", columnKey: \"new_deaths\"},\r\n{columnHeader: \"New Deaths (per Million)\", columnKey: \"new_deaths_per_million\"},\r\n{columnHeader: \"Stringency Index\", columnKey: \"stringency_index\"}\r\n    ]\r\n\r\n\r\n    const countryDropdown = () => {\r\n        if(!countries===undefined){\r\n            console.log('dropdonw')\r\n        return(\r\n    <select name=\"countries\" id=\"countries\" onChange={handleChange}>\r\n        {countries.map(country => \r\n      <option value={(country as any).tla}>{(country as any).location}</option>\r\n      )}\r\n    </select>\r\n        )\r\n        }\r\n    }\r\n\r\n    if (!covidData){\r\n        return(\r\n        <div>\r\n            <p>Loading...</p>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n\r\n else {\r\n    return (\r\n        <div>\r\n            <p>COVID Data</p>\r\n            <select name=\"countries\" id=\"countries\" onChange={handleChange}>\r\n        {countries.map(country => \r\n      <option value={(country as any).tla}>{(country as any).location}</option>\r\n      )}\r\n    </select>\r\n            <Table columns={columns} data={covidData} country={activeCountry}/> \r\n        </div>\r\n    )\r\n\r\n}\r\n}\r\n\r\n","import './App.css';\nimport { Main } from './Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}